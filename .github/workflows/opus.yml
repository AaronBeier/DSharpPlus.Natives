name: Build opus
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/opus.yml'

jobs:
  build:
    name: Build opus
    runs-on: ${{ matrix.os }}

    outputs:
      version: ${{ steps.print-version.outputs.version }}

    strategy:
      fail-fast: false # Run the other two OSs even if one fails
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
          
    steps:
      - name: Clone opus repo
        uses: actions/checkout@v4.2.2
        with:
          repository: xiph/opus
          submodules: recursive

      - name: Checkout latest Tag
        shell: bash
        run: git fetch --tags && git checkout "$(git describe --tags "$(git rev-list --tags --max-count=1)")"

      - name: Print Version
        id: print-version
        shell: bash
        run: |
          git fetch --tags 
          echo "version=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT
      
      - name: Build opus
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            for arch in x64 ARM64; do # We dont want Win32
              mkdir -p output/$arch
              mkdir build-$arch
              cd build-$arch
              cmake -DOPUS_BUILD_SHARED_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release -A $arch ..
              cmake --build . -j 4 --config Release
              ls
              cp Release/opus.dll ../output/$arch/libopus.dll
              cd ..
            done
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            for arch in x64 ARM64; do
              mkdir -p output/$arch
              mkdir build-$arch
              cd build-$arch
              if [[ "$arch" == "ARM64" ]]; then
                sudo apt update
                sudo apt install cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                cmake -DOPUS_BUILD_SHARED_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ ..
              else
                cmake -DOPUS_BUILD_SHARED_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release ..
              fi
              cmake --build . -j 4
              cp libopus.so ../output/$arch/libopus.so
              cd ..
            done
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mkdir build output
            cd build
            cmake -DOPUS_BUILD_SHARED_LIBRARY=ON -DCMAKE_BUILD_TYPE=Release "-DCMAKE_OSX_ARCHITECTURES=arm64;arm64e;x86_64;x86_64h" ..
            cmake --build . -j 4 --config Release
            cp libopus.dylib ../output/libopus.dylib
            cd ..
          fi

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4.4.3
        with:
          name: opus-${{ matrix.os }}
          path: output
          compression-level: 9 # Prefer smaller downloads over a shorter workflow runtime


  publish-nuget:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSPROJ files
        uses: actions/checkout@v4.2.2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp
          pattern: opus-*
          merge-multiple: true

      - name: Move Artifacts
        run: |
          mkdir -p lib/opus/win-x64/native
          mkdir -p lib/opus/linux-x64/native
          mkdir -p lib/opus/win-arm64/native
          mkdir -p lib/opus/linux-arm64/native
          mkdir -p lib/opus/osx/native
          cp temp/x64/libopus.dll lib/opus/win-x64/native/libopus.dll
          cp temp/x64/libopus.so lib/opus/linux-x64/native/libopus.so
          cp temp/ARM64/libopus.dll lib/opus/win-arm64/native/libopus.dll
          cp temp/ARM64/libopus.so lib/opus/linux-arm64/native/libopus.so
          cp temp/libopus.dylib lib/opus/osx/native/libopus.dylib

      - name: Pack DSharpPlus.Natives.Opus
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          VERSION=${{ needs.build.outputs.version }}
          VERSION="${VERSION:1}"
          dotnet pack ./build/DSharpPlus.Natives.Opus.csproj -c Release -p:Version="$VERSION.${{ github.run_number }}"
          dotnet nuget push "artifacts/**" --skip-duplicate -k "$NUGET_API_KEY" -s https://api.nuget.org/v3/index.json
